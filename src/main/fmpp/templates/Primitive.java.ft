package ${PACKAGE};

import java.util.Arrays;
<#list PRIMITIVES as p>
import ${PACKAGE}.comparators.${p?capitalize}Comparator;
</#list>

/**
 * A utility class that provides comparator-based sorting methods for all
 * primitive arrays. It also provides non-comparator sort methods for
 * {@code boolean} arrays since {@link Arrays} does not.
 */
public final class Primitive {

<#list PRIMITIVES as type>
<#assign Type = type?capitalize>
<#assign comparator = Type + "Comparator">
    /**
     * Sorts the given array by the given comparator. The sorting algorithm used
     * is a stable sort, so two items that compare to 0 will be kept in the same
     * order when the sort is complete.
     *
     * @param a the array to sort
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @throws NullPointerException if {@code a == null}
     * @throws IllegalArgumentException if sorting finds that {@code c} violates
     *      the {@link ${comparator}} contract
     */
    public static void sort(${type}[] a, ${comparator} c) {
        sort(a, 0, a.length, c);
    }

    /**
     * Sorts the indicated portion of the given array by the given comparator.
     * The sorting algorithm used is a stable sort, so two items that compare to
     * 0 will be kept in the same order when the sort is complete.
     *
     * @param a the array to sort
     * @param fromIndex the index (inclusive) marking the beginning of the array
     *      portion
     * @param toIndex the index (exclusive) marking the end of the array portion
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @throws NullPointerException if {@code a == null}
     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or
     *      {@code toIndex > a.length}
     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or
     *      sorting finds that {@code c} violates the {@link ${comparator}}
     *      contract
     */
    public static void sort(${type}[] a, int fromIndex, int toIndex, ${comparator} c) {
        if (c == null) {
            Arrays.sort(a, fromIndex, toIndex);
        } else {
            checkBounds(a.length, fromIndex, toIndex);
<#if type = "byte">
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, c);
<#else>
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0, c);
</#if>
        }
    }

</#list>
    private static void checkBounds(int len, int fromIndex, int toIndex) {
        if (fromIndex < 0) {
            throw new ArrayIndexOutOfBoundsException("fromIndex < 0");
        }
        if (toIndex > len) {
            throw new ArrayIndexOutOfBoundsException("toIndex > a.length");
        }
        if (fromIndex > toIndex) {
            throw new IllegalArgumentException("fromIndex > toIndex");
        }
    }

    private Primitive(){}
}
