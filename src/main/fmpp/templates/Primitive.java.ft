package ${PACKAGE};

import java.util.Arrays;
<#list PRIMITIVES as p>
import ${PACKAGE}.comparators.${p?capitalize}Comparator;
</#list>

/**
 * A utility class that provides comparator-based sorting methods for all
 * primitive arrays. It also provides non-comparator sort methods for
 * {@code boolean} arrays since {@link Arrays} does not.
 */
public final class Primitive {

    /**
     * Sorts the given array so that all the {@code false} values are at the
     * beginning.
     *
     * @param a the array to sort
     * @throws NullPointerException if {@code a == null}
     */
    public static void sort(boolean[] a) {
        sort(a, 0, a.length);
    }

    /**
     * Sorts the indicated portion of the given array so that all the
     * {@code false} values are at the beginning.
     *
     * @param a the array to sort
     * @param fromIndex the index (inclusive) marking the beginning of the array
     *      portion
     * @param toIndex the index (exclusive) marking the end of the array portion
     * @throws NullPointerException if {@code a == null}
     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or
     *      {@code toIndex > a.length}
     * @throws IllegalArgumentException if {@code fromIndex > toIndex}
     */
    public static void sort(boolean[] a, int fromIndex, int toIndex) {
        checkBounds(a.length, fromIndex, toIndex);
        while (fromIndex < toIndex && !a[fromIndex]) {
            fromIndex++;
        }
        if (fromIndex == toIndex) {
            // all false values
            return;
        }
        int nextFalse = fromIndex;
        for (int i = fromIndex + 1; i < toIndex; i++) {
            if (!a[i]) {
                a[nextFalse] = false;
                a[i] = true;
                nextFalse++;
            }
        }
    }
<#list PRIMITIVES as type>
<#assign Type = type?capitalize>
<#assign Cmp = Type + "Comparator">

    /**
     * Sorts the given array by the given comparator. The sorting algorithm used
     * is a stable sort, so two items that compare to 0 will be kept in the same
     * order when the sort is complete.
<#if type != "boolean">
     * <p>
     * For uses that don't care about a stable sort, especially when the data
     * has no underlying patterns (that is, completely unsorted, random data),
     * the non-stable version of this method may be up to twice as fast. Use
     * {@link #sort(${type}[], ${Cmp}, boolean)}, with {@code stable} set to
     * {@code false}.
</#if>
     *
     * @param a the array to sort
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @throws NullPointerException if {@code a == null}
     * @throws IllegalArgumentException if sorting finds that {@code c} violates
     *      the {@link ${Cmp}} contract
     */
    public static void sort(${type}[] a, ${Cmp} c) {
        sort(a, 0, a.length, c);
    }

    /**
     * Sorts the indicated portion of the given array by the given comparator.
     * The sorting algorithm used is a stable sort, so two items that compare to
     * 0 will be kept in the same order when the sort is complete.
<#if type != "boolean">
     * <p>
     * For uses that don't care about a stable sort, especially when the data
     * has no underlying patterns (that is, completely unsorted, random data),
     * the non-stable version of this method may be up to twice as fast. Use
     * {@link #sort(${type}[], int, int, ${Cmp}, boolean)}, with {@code stable}
     * set to {@code false}.
</#if>
     *
     * @param a the array to sort
     * @param fromIndex the index (inclusive) marking the beginning of the array
     *      portion
     * @param toIndex the index (exclusive) marking the end of the array portion
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @throws NullPointerException if {@code a == null}
     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or
     *      {@code toIndex > a.length}
     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or
     *      sorting finds that {@code c} violates the {@link ${Cmp}}
     *      contract
     */
    public static void sort(${type}[] a, int fromIndex, int toIndex,
            ${Cmp} c) {
<#if type = "boolean">
        if (c == null) {
            sort(a, fromIndex, toIndex);
        } else {
            checkBounds(a.length, fromIndex, toIndex);
            BooleanTimSort.sort(a, fromIndex, toIndex, c, null, 0, 0);
        }
<#else>
        sort(a, fromIndex, toIndex, c, true);
</#if>
    }
<#if type != "boolean">

    /**
     * Sorts the given array by the given comparator. When {@code stable} is
     * {@code true}, the sorting algorithm will result in a stable sort, so two
     * items that compare to 0 will be kept in the same order when the sort is
     * complete. When {@code false}, no such guarantees are made, but the sort
     * may be up to twice as fast, especially for unpatterned data.
     *
     * @param a the array to sort
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @param stable whether to use a slower, but stable, sorting algorithm
     * @throws NullPointerException if {@code a == null}
     * @throws IllegalArgumentException if sorting finds that {@code c} violates
     *      the {@link ${Cmp}} contract
     */
    public static void sort(${type}[] a, ${Cmp} c, boolean stable) {
        sort(a, 0, a.length, c, stable);
    }

    /**
     * Sorts the indicated porition of the given array by the given comparator.
     * When {@code stable} is {@code true}, the sorting algorithm will result in
     * a stable sort, so two items that compare to 0 will be kept in the same
     * order when the sort is complete. When {@code false}, no such guarantees
     * are made, but the sort may be up to twice as fast, especially for
     * unpatterned data.
     *
     * @param a the array to sort
     * @param fromIndex the index (inclusive) marking the beginning of the array
     *      portion
     * @param toIndex the index (exclusive) marking the end of the array portion
     * @param c the comparator to use for sorting the array, or {@code null} for
     *      natural ordering
     * @param stable whether to use a slower, but stable, sorting algorithm
     * @throws NullPointerException if {@code a == null}
     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or
     *      {@code toIndex > a.length}
     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or
     *      sorting finds that {@code c} violates the {@link ${Cmp}}
     *      contract
     */
    public static void sort(${type}[] a, int fromIndex, int toIndex,
            ${Cmp} c, boolean stable) {
        if (c == null) {
            Arrays.sort(a, fromIndex, toIndex);
        } else {
            checkBounds(a.length, fromIndex, toIndex);
            if (stable) {
                ${Type}TimSort.sort(a, fromIndex, toIndex, c, null, 0, 0);
            } else {
                ${Type}DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, c, null, 0, 0);
            }
        }
    }
</#if>
</#list>

    private static void checkBounds(int len, int fromIndex, int toIndex) {
        if (fromIndex < 0) {
            throw new ArrayIndexOutOfBoundsException("fromIndex < 0");
        }
        if (toIndex > len) {
            throw new ArrayIndexOutOfBoundsException("toIndex > a.length");
        }
        if (fromIndex > toIndex) {
            throw new IllegalArgumentException("fromIndex > toIndex");
        }
    }

    private Primitive(){}
}
